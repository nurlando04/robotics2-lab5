clear L
deg = pi/180;

L(1) = Link('d', 0, 'a', 0, 'alpha', pi/2, ...
    'I', [0, 0, 0], ...
    'r', [0, 0, 0], ...
    'm', 0, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 1.48e-3, ...
    'Tc', [0.395 -0.435], ...
    'qlim', [-180 180]*deg, 'revolute','modified');

L(2) = Link('d', 0, 'a', 1, 'alpha', 0, ...
    'I', [0.0125, 0.8396, 0.8396], ...
    'r', [0.5 0, 0], ...
    'm', 10, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', .817e-3, ...
    'Tc', [0.126 -0.071], ...
    'qlim', [-90 90]*deg, 'revolute','modified' );

L(3) = Link('d', 0, 'a', 1, 'alpha', 0,  ...
    'I', [0.0125, 0.8396, 0.8396], ...
    'r', [0.5, 0, 0], ...
    'm', 10, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 1.38e-3, ...
    'Tc', [0.132, -0.105], ...
    'qlim', [-90 90]*deg, 'revolute','modified' );

robonurik = SerialLink(L, 'name', 'Robonurik');

robonurik.gravity = [0, 0, -9.8];

pose1 = [0 -pi/2 0]; %homepose
pose2 = [0 0 0]; %holpose

load1 = [1 0 0];
load2 = [0 -1 0];
robonurik.plot(pose2);
robonurik.teach;
M = robonurik.inertia(pose1);
G1 = robonurik.gravload(pose1);
G2 = robonurik.gravload(pose2);
C = robonurik.coriolis(pose1, pose2);
F = robonurik.friction([0 0 0]);

J_pose1 = robonurik.jacob0(pose1);
J_pose2 = robonurik.jacob0(pose2);

T_pose1 = J_pose1.*G1  %torque when joint2=-90
T_pose2 = J_pose2.*G2 %torque all joints=0
clear L